<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lecture 4 on MLOps: Operationalizing Machine Learning</title>
    <link>https://chicagodatascience.github.io/MLOps/lecture4/</link>
    <description>Recent content in Lecture 4 on MLOps: Operationalizing Machine Learning</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://chicagodatascience.github.io/MLOps/lecture4/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes</title>
      <link>https://chicagodatascience.github.io/MLOps/lecture4/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chicagodatascience.github.io/MLOps/lecture4/kubernetes/</guid>
      <description>Caveat: Unless we have a truly massive or complex system, we probably don‚Äôt need Kubernetes, and using it should be the result of a deliberate cost benefit analysis in comparison to other hosted solutions or managed solutions.
Introduction  Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications. It was open-sourced by Google. Its predecessor was called borg internally. Kubernetes, or K8s for short, is a central orchestration system in large complex software systems.</description>
    </item>
    
    <item>
      <title>Model Serving using Kubernetes</title>
      <link>https://chicagodatascience.github.io/MLOps/lecture4/modelkube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chicagodatascience.github.io/MLOps/lecture4/modelkube/</guid>
      <description>This time, instead of the weather app, we will deploy a container containing our recommendation model. Here are the steps.
 Lets start minicube
(datasci-dev) ttmac:docker-prediction-service theja$ minikube start üòÑ minikube v1.13.0 on Darwin 10.14.6 ‚ñ™ MINIKUBE_ACTIVE_DOCKERD=minikube ‚ú® Using the hyperkit driver based on existing profile üëç Starting control plane node minikube in cluster minikube üîÑ Restarting existing hyperkit VM for &amp;quot;minikube&amp;quot; ... üê≥ Preparing Kubernetes v1.19.0 on Docker 19.03.12 .</description>
    </item>
    
    <item>
      <title>Orchestration using GKE</title>
      <link>https://chicagodatascience.github.io/MLOps/lecture4/gke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chicagodatascience.github.io/MLOps/lecture4/gke/</guid>
      <description>Note: While exploring GKE, keep a tab on billing (check every so often)!
Introduction to Google Kubernetes Engine by GCP  Google Kubernetes Engine (GKE) by GCP a managed service for running K8s, with key features such as security, scaling and multi-cluster support taken care of as part of K8s on their infrastructure.
 GKE&amp;rsquo;s operation is very similar to ECS.
 Our goal will be to use GKE for deploying our recommendation system (the ML model we have been using).</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://chicagodatascience.github.io/MLOps/lecture4/exercises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chicagodatascience.github.io/MLOps/lecture4/exercises/</guid>
      <description>Launch a kubernetes cluster with a single pod/container that loads and serves Jupyter notebooks, and which can be accessed via the browser. The images from https://hub.docker.com/u/jupyter/#! such as https://hub.docker.com/r/jupyter/datascience-notebook can help.
 Go through the introductory examples from https://k3s.io and from https://microk8s.io/. Both of these allow you to try Kubernetes locally.
 Try switching to different images such as https://hub.docker.com/_/python/  with minikube.
 Go through the documentation for Kubernetes and Docker.</description>
    </item>
    
  </channel>
</rss>